package Assignment13;

class Node4 
{
    int data;
    Node4 next;
    public Node4(int data) 
    {
        this.data = data;
        this.next = null;
    }
}
public class ReverseAlternateKNodes 
{
    public static Node4 reverseAlternateKGroup(Node4 head, int k) 
    {
        if (head == null || k <= 1) 
        {
            return head;
        }
        Node4 current = head;
        Node4 prev = null;
        Node4 next = null;
        int count = 0;
        while (current != null && count < k) 
        {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }
        count = 0;
        while (current != null && count < k) 
        {
            prev.next = current;
            prev = current;
            current = current.next;
            count++;
        }
        if (current != null) 
        {
            prev.next = reverseAlternateKGroup(current, k);
        }
        return prev;
    }

    public static void printList(Node4 head)
    {
        Node4 current = head;
        while (current != null) 
        {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
    public static void main(String[] args) 
    {
        Node4 head = new Node4(1);
        head.next = new Node4(2);
        head.next.next = new Node4(3);
        head.next.next.next = new Node4(4);
        head.next.next.next.next = new Node4(5);
        head.next.next.next.next.next = new Node4(6);
        head.next.next.next.next.next.next = new Node4(7);
        head.next.next.next.next.next.next.next = new Node4(8);
        head.next.next.next.next.next.next.next.next = new Node4(9);
        int k = 3;
        Node4 reversed = reverseAlternateKGroup(head, k);
        printList(reversed);
    }
}

